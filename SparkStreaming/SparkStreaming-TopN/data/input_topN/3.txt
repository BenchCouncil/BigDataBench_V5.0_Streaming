
Figure~\ref{tool} shows the architecture of the workload characterization tool. The tool mainly consists of two parts, a profiler and a performance data analyzer. (1)The \emph{profiler} is deployed on each node in the cluster, which runs the workloads we want to characterize. It collects performance data specified by users when the workload begins to run, and stores the profile data into local disk. After a workload is finished, the profiled data will transfer to the performance data analyzer through network. Specifically, We use Python scripts to drive Perf, which can access hardware Performance Counter Unit (PMU) and the \emph{proc} file system in Linux for getting Operating System (OS) level information. We also provide an extended interface which users can use to collect other data. (2)The \emph{performance data analyzer} is deployed on an exclusive node that does not run other workloads. The performance data analyzer will collect the performance data from all profilers and then process those data with different modules. First, the collector module in performance data analyzer will collect all the data from each profiler. Then the collector will store those raw data into the database. Our tool will normalize those raw data according to different definitions of metrics and automatically calculates the metrics. After that, the performance data analyzer will produce two kinds of outputs: workload subset and performance data visualization.

\begin{figure}[tbp]
\centering
%\epsfig{file=tool_arch.eps,scale=0.6}
\includegraphics[scale=0.6]{pic/tool_arch.eps}
\caption{The architecture of the workload characterization tool}
\label{tool}
\end{figure}

Then we will introduce how our tool produces those two kinds of outputs. (1)\emph{Workload Subset}: Before subsetting, removing correlation is needed, because the collected metrics may be correlated and the correlated data can skew analysis. We use Principle Component Analysis (PCA) to remove such correlated data and use Kaiser's Criterion to choose the number of principle components (PCs). After eliminating the correlation, we use K-means clustering algorithm to group the whole set of workloads into K similarly behaving application clusters, and use the Bayesian Information Criterion (BIC) to choose the proper K value. Here, the BIC is a measure of the 'goodness of fit' of the clustering. The larger the BIC score, the higher the probability that the clustering is a good fit to the performance data, so our tool will determine the K value that yields the highest BIC score. And then, users can choose a representative workload from these cluster. (2)\emph{Performance Data Visualization}: Our tool provide the figure plotter to plot different kinds of graphes and provide the function to show the similarity among workloads. For example, histogram, which facilitates users to compare the performance metrics among different workloads; dendrogram, illustrates the similarity among workloads when using hierarchical clustering.

At last, The tool is implemented in Python. It %has integrated several statistical functions and visual functions. The statistical functions are used to normalize performance data, and perform principle component analysis. The visual functions are used to plot different kinds of graphs. In our implementation, we
